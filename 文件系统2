文件管理
1. 文件系统实例 FAT
2. 文件操作的实现
3. 文件系统的管理
4. 文件系统的安全性
5. 文件系统的性能问题
6. 文件系统的两个练习
1.1 windows - fat16文件系统
（引导区+ 文件分配表1+分拣分配表2+根目录+其他目录和文件）
簇大小：1，2，4，8，16，32，64等扇区
文件系统的数据记录是在“引导扇区”中（而unix是在超级数据块中）
文件分配表FAT的作用：描述簇的分配状态，标注下一簇的簇号等
FAT表项：2字节（16位-》fat16）；目录项 32字节；本目录大小固定

1.2 FAT文件系统-mbr(主引导记录） 0 号扇区
FAT文件系统-dbr(分区记录）：bios参数块，扩展bios参数块
bios参数块：每簇扇区数，根目录大小，每个文件分配表的扇区数，根目录的其实簇号

1.4 windows文件分配表FAT 
可以把文件分配表看成是一个整数数组，每个整数代表磁盘分区的一个簇号（物理块块号）
状态：未使用，坏簇，系统保留，被文件占用（下一簇簇号），最后一簇（0xFFFF),簇号从0开始编号，
簇0和簇1是保留的。
1.5 FAT16目录项
32个字节（文件名8 ， 文件扩展名3，文件属性字节1，保留10，最后一次修改时间2，最后一次修改日期2，
起始簇号2，文件大小4）
FAT32文件系统
根目录区（root区）不再是固定区域，固定大小，而是数据区的一部分。采用与子目录文件相同的管理方式。
目录项仍然占用32个字节，但分为各种类型）
32个字节（文件名8，文件扩展名3，文件属性字节1，保留1，创建时间1 精确到1/10秒，文件创建日期2，文件最后访问日期2，
起始簇号的高16位2，最后一次修改时间2，最后一次修改日期2，起始簇号的低10位2，文件长度4 )
1.6 长文件名的实现方式
目录项不固定长
目录项固定长，文件属性存放在堆内，被指向堆。

2.1 文件操作的实现
创建文件：建立系统与文件的练习，实质上是建立文件的FCB。
a. 在目录中为新文件建立一个目录项，根据提供的参数及需要填写相关内容
b. 分配必要的存储空间
打开文件： 根据文件名在文件目录中检索，并将该文件的目录项读入内存，建立相应的数据结构，
为后续的文件操作做好准备。
（文件描述符/文件句柄）

2.2 文件操作- 建立文件
create （文件名， 访问权限）
a, 检查参数的合法性。例如：文件名是否符合命名规则；有无重名的文件；合法进入下一步，否则报错返回
b, 申请空闲目录项，并填写相关内容
c, 为文件申请磁盘块；
d, 返回
（引导记录+ 超级数据块+ 空闲区管理+ i节点区 + 根目录区 + 文件和目录）

2.3 文件操作-打开文件

5.1 文件系统的性能安全
a. 块高速缓存（block cache) ：又称为文件缓存，磁盘高速缓存，缓冲区高速缓存
又指：在内存中为磁盘块设置的一个缓冲区，保留了磁盘中某些块的副本。
如何利用？ 在检查所有的读请求，看所需块是否在块高速缓冲，如果在，直接进行读操作。
否则现将数据块读入高速缓存，再拷贝到所需要的地方。
原因？由于访问的局部性原理，当一数据块被读入块高速缓存以满足一个I/O请求时，很可能将来
还会再次访问到这一数据块。
如果实现？块高速缓存的组织（双向链表，如果有转变成hash table 散列表，则放入队尾，
块高速缓存的置换（修改LRU), 该块是否不久后会再次使用，放队尾
块高速缓存写入策略- 该块是否影响文件系统的一致性（不同的写入方式，及时写入。。。）

b. 提前读取
思路：每次访问磁盘，多读入一些磁盘块，依据：程序执行的空间局部性原理 开销：
较少（只有数据传输时间）。具有针对性。

c. windows的文件访问方式（1/3）
不使用文件缓存（高速缓存）：普通方式// 通过Windows提供的flushfilebuffer函数实现
使用文件缓存（高速缓存）预读取，每次读取的块大小，缓冲区大小，置换方式// 
写回，写回时时机选择，一致性问题
异步模式：不再等待磁盘操作的完成// 使处理器和I/O 并发工作。
d. windows的文件访问方式（2/3）
用户对磁盘的访问通过访问 文件缓存来实现
1.由windows的cache manager实现对缓存的控制
读取数据的时候预取，在cache满时，根据lru原则清除缓存的内容，定期更新磁盘内容
使其与cache一致（1秒）
2. write-back机制
在用户要对磁盘写数据时，只更改cache中的内容，由cache manager决定何时将更新
与反映到磁盘
（同一份数据有3份数据，系统缓存，磁盘，进程地址空间）
f. 合理分配磁盘空间
分配磁盘块时，把有可能顺序存储的块放在一起-》尽量分配在同一柱面上，从而减少
磁盘臂的移动次数的距离。
e. 磁盘调度
当有多个访盘请求等待时，采用一定的策略，对这些请求的服务顺序调整安排。
-》降低平均磁盘服务时间，达到公平，高效。
公平： 一个I/O 请求在有限时间内满足
高效： 减少设备机械运动带来的时间开销
一次访盘时间 = 寻道时间 + 旋转延迟时间 + 传输时间
1. 减少寻道时间 2. 减少旋转延迟时间
例如：磁盘访问序列 98，183，37，122，14，124，65，67
刚开始磁头在53
i) 先来先服务（fcfs)
优点：简单公平
缺点：效率不高，相邻两次请求可能会造成最内侧道最外侧的柱面寻道，使得磁
磁头反复移动，增加了服务时间，对机械也不李。
ii)最短寻道时间优先（shortest seek time first)
优点：改善了磁盘平均服务时间
缺点：造成了某些访问请求长期等待得不到服务（饥饿现象）
iii) 扫描算法scan(电梯算法）- 折中距离，方向
当有访问请求时，磁头按照一个方向移动，然后判断该方向上是否还有访问请求，
若没有，则改变移动方向。
iv) 单向扫描调度C-SCAN 
总是从0号柱面开始向里扫描，减少新请求的等待时间
v) n-step-scan 策略
将磁盘请求队列分成长度N的子队列，每次用scan处理的一个子序列
vi)f-scan 使用两个子队列，处理完第一个子队列，再处理第二个子队列

vii) 旋转调度算法
根据延迟时间来决定执行次序的调度
1. 若干等待访问者请求访问同一磁头上的不同扇区
2. 若干等待访问者请求访问不同磁头上的不同编号的扇区
3. 若干等待访问者请求不同磁头上具有相同的扇区






















